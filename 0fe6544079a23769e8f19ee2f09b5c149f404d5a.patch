diff -up dolphin-24.12.0/src/kitemviews/kfileitemlistview.h.6~ dolphin-24.12.0/src/kitemviews/kfileitemlistview.h
--- dolphin-24.12.0/src/kitemviews/kfileitemlistview.h.6~	2024-12-03 04:15:16.000000000 +0100
+++ dolphin-24.12.0/src/kitemviews/kfileitemlistview.h	2024-12-19 19:49:58.170386927 +0100
@@ -136,6 +136,7 @@ private:
     QTimer *m_updateIconSizeTimer;
 
     friend class KFileItemListViewTest; // For unit testing
+    friend class DolphinMainWindowTest; // For unit testing
 };
 
 #endif
diff -up dolphin-24.12.0/src/kitemviews/kfileitemmodelrolesupdater.cpp.6~ dolphin-24.12.0/src/kitemviews/kfileitemmodelrolesupdater.cpp
--- dolphin-24.12.0/src/kitemviews/kfileitemmodelrolesupdater.cpp.6~	2024-12-03 04:15:16.000000000 +0100
+++ dolphin-24.12.0/src/kitemviews/kfileitemmodelrolesupdater.cpp	2024-12-19 19:49:58.170505431 +0100
@@ -575,6 +575,7 @@ void KFileItemModelRolesUpdater::slotGot
     disconnect(m_model, &KFileItemModel::itemsChanged, this, &KFileItemModelRolesUpdater::slotItemsChanged);
     m_model->setData(index, data);
     connect(m_model, &KFileItemModel::itemsChanged, this, &KFileItemModelRolesUpdater::slotItemsChanged);
+    Q_EMIT previewJobFinished(); // For unit testing
 
     m_finishedItems.insert(item);
 }
diff -up dolphin-24.12.0/src/kitemviews/kfileitemmodelrolesupdater.h.6~ dolphin-24.12.0/src/kitemviews/kfileitemmodelrolesupdater.h
--- dolphin-24.12.0/src/kitemviews/kfileitemmodelrolesupdater.h.6~	2024-12-03 04:15:16.000000000 +0100
+++ dolphin-24.12.0/src/kitemviews/kfileitemmodelrolesupdater.h	2024-12-19 19:49:58.170606281 +0100
@@ -178,6 +178,9 @@ public:
      */
     void setHoverSequenceState(const QUrl &itemUrl, int seqIdx);
 
+Q_SIGNALS:
+    void previewJobFinished(); // For unit testing
+
 private Q_SLOTS:
     void slotItemsInserted(const KItemRangeList &itemRanges);
     void slotItemsRemoved(const KItemRangeList &itemRanges);
diff -up dolphin-24.12.0/src/kitemviews/kitemlistview.h.6~ dolphin-24.12.0/src/kitemviews/kitemlistview.h
--- dolphin-24.12.0/src/kitemviews/kitemlistview.h.6~	2024-12-03 04:15:16.000000000 +0100
+++ dolphin-24.12.0/src/kitemviews/kitemlistview.h	2024-12-19 19:49:58.170685330 +0100
@@ -794,6 +794,8 @@ private:
     friend class KItemListControllerTest;
     friend class KItemListViewAccessible;
     friend class KItemListDelegateAccessible;
+
+    friend class DolphinMainWindowTest;
 };
 
 /**
diff -up dolphin-24.12.0/src/tests/dolphinmainwindowtest.cpp.6~ dolphin-24.12.0/src/tests/dolphinmainwindowtest.cpp
--- dolphin-24.12.0/src/tests/dolphinmainwindowtest.cpp.6~	2024-12-19 19:49:58.154854765 +0100
+++ dolphin-24.12.0/src/tests/dolphinmainwindowtest.cpp	2024-12-19 19:52:35.753575323 +0100
@@ -11,6 +11,9 @@
 #include "dolphinviewcontainer.h"
 #include "kitemviews/kitemlistcontainer.h"
 #include "testdir.h"
+#include "kitemviews/kfileitemmodel.h"
+#include "kitemviews/kfileitemmodelrolesupdater.h"
+#include "views/dolphinitemlistview.h"
 
 #include <KActionCollection>
 #include <KConfig>
@@ -52,6 +55,7 @@ private Q_SLOTS:
     void testOpenFiles();
     void testAccessibilityAncestorTree();
     void testAutoSaveSession();
+    void testThumbnailAfterRename();
     void cleanupTestCase();
 
 private:
@@ -797,6 +801,52 @@ void DolphinMainWindowTest::testAutoSave
     m_mainWindow->setSessionAutoSaveEnabled(false);
 }
 
+void DolphinMainWindowTest::testThumbnailAfterRename()
+{
+    // Create testdir and red square jpg for testing
+    QScopedPointer<TestDir> testDir{new TestDir()};
+    QImage testImage(256, 256, QImage::Format_Mono);
+    testImage.setColorCount(1);
+    testImage.setColor(0, qRgba(255, 0, 0, 255)); // Index #0 = Red
+    for (short x = 0; x < 256; ++x) {
+        for (short y = 0; y < 256; ++y) {
+            testImage.setPixel(x, y, 0);
+        }
+    }
+    testImage.save(testDir.data()->path() + "/a.jpg");
+
+    // Open dir and show it
+    m_mainWindow->openDirectories({testDir->url()}, false);
+    DolphinView *view = m_mainWindow->activeViewContainer()->view();
+    // Prepare signal spies
+    QSignalSpy viewDirectoryLoadingCompletedSpy(view, &DolphinView::directoryLoadingCompleted);
+    QSignalSpy itemsChangedSpy(view->m_model, &KFileItemModel::itemsChanged);
+    QSignalSpy modelDirectoryLoadingCompletedSpy(view->m_model, &KFileItemModel::directoryLoadingCompleted);
+    QSignalSpy previewUpdatedSpy(view->m_view->m_modelRolesUpdater, &KFileItemModelRolesUpdater::previewJobFinished);
+    // Show window and check that our preview has been updated, then wait for it to appear
+    m_mainWindow->show();
+    QVERIFY(viewDirectoryLoadingCompletedSpy.wait());
+    QVERIFY(previewUpdatedSpy.wait());
+    QVERIFY(QTest::qWaitForWindowExposed(m_mainWindow.data()));
+    QVERIFY(m_mainWindow->isVisible());
+    QTest::qWait(500); // we need to wait for the file widgets to become visible
+
+    // Set image selected and rename it to b.jpg, make sure editing role is working
+    view->markUrlsAsSelected({QUrl(testDir->url().toString() + "/a.jpg")});
+    view->updateViewState();
+    view->renameSelectedItems();
+    QVERIFY(view->m_view->m_editingRole);
+    QTest::keyClick(QApplication::focusWidget(), Qt::Key_B);
+    QTest::keyClick(QApplication::focusWidget(), Qt::Key_Enter);
+    QVERIFY(itemsChangedSpy.wait()); // Make sure that rename worked
+
+    // Check that preview gets updated and filename is correct
+    QVERIFY(previewUpdatedSpy.wait());
+    QVERIFY(!view->m_view->m_editingRole);
+    QCOMPARE(view->m_model->fileItem(0).name(), "b.jpg");
+    QCOMPARE(view->m_model->count(), 1);
+}
+
 void DolphinMainWindowTest::cleanupTestCase()
 {
     m_mainWindow->showNormal();
diff -up dolphin-24.12.0/src/views/dolphinview.cpp.6~ dolphin-24.12.0/src/views/dolphinview.cpp
--- dolphin-24.12.0/src/views/dolphinview.cpp.6~	2024-12-03 04:15:16.000000000 +0100
+++ dolphin-24.12.0/src/views/dolphinview.cpp	2024-12-19 19:49:58.170952514 +0100
@@ -1888,15 +1888,18 @@ void DolphinView::selectNextItem()
 
 void DolphinView::slotRenamingResult(KJob *job)
 {
-    if (job->error()) {
+    // Change model data after renaming has succeeded. On failure we do nothing.
+    // If there is already an item with the newUrl, the copyjob will open a dialog for it, and
+    // KFileItemModel will update the data when the dir lister signals that the file name has changed.
+    if (!job->error()) {
         KIO::CopyJob *copyJob = qobject_cast<KIO::CopyJob *>(job);
         Q_ASSERT(copyJob);
         const QUrl newUrl = copyJob->destUrl();
+        const QUrl oldUrl = copyJob->srcUrls().at(0);
         const int index = m_model->index(newUrl);
-        if (index >= 0) {
+        if (m_model->index(oldUrl) == index) {
             QHash<QByteArray, QVariant> data;
-            const QUrl oldUrl = copyJob->srcUrls().at(0);
-            data.insert("text", oldUrl.fileName());
+            data.insert("text", newUrl.fileName());
             m_model->setData(index, data);
         }
     }
@@ -2031,24 +2034,12 @@ void DolphinView::slotRoleEditingFinishe
             }
 #endif
 
-            const bool newNameExistsAlready = (m_model->index(newUrl) >= 0);
-            if (!newNameExistsAlready && m_model->index(oldUrl) == index) {
-                // Only change the data in the model if no item with the new name
-                // is in the model yet. If there is an item with the new name
-                // already, calling KIO::CopyJob will open a dialog
-                // asking for a new name, and KFileItemModel will update the
-                // data when the dir lister signals that the file name has changed.
-                QHash<QByteArray, QVariant> data;
-                data.insert(role, retVal.newName);
-                m_model->setData(index, data);
-            }
-
             KIO::Job *job = KIO::moveAs(oldUrl, newUrl);
             KJobWidgets::setWindow(job, this);
             KIO::FileUndoManager::self()->recordJob(KIO::FileUndoManager::Rename, {oldUrl}, newUrl, job);
             job->uiDelegate()->setAutoErrorHandlingEnabled(true);
 
-            if (!newNameExistsAlready) {
+            if (m_model->index(newUrl) < 0) {
                 forceUrlsSelection(newUrl, {newUrl});
                 updateSelectionState();
 
